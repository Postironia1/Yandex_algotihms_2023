#include<iostream>
#include <vector>
#include <limits>
#include <queue>
#include <fstream>

const long long INF = std::numeric_limits<long long>::max();

struct Path {
    long long destinaion_time;
    long long arrival_time;
};

#include<iostream>
#include <vector>
#include <limits>


long long dijkstra(const std::vector <std::vector<std::pair<long long, Path>>>& matrix, int N, int S, int F) {

    std::vector<long long> arrival_times(N + 1, INF);

    arrival_times[S] = 0;

    std::vector<bool> visited(N + 1, false);

    for (int i = 1; i < N; ++i) {

        long long min_dist = INF;
        long long min_vex = -1;

        for (int j = 1; j < N + 1; ++j) {
            if (!visited[j] && arrival_times[j] < min_dist) {
                min_dist = arrival_times[j];
                min_vex = j;
            }
        }

        if (min_vex == -1)
            break;

        visited[min_vex] = true;

        for (int j = 0; j < matrix[min_vex].size(); ++j) {
            long long arrival_point = matrix[min_vex][j].first;
            long long arrival_time = matrix[min_vex][j].second.arrival_time;
            long long destintion_time = matrix[min_vex][j].second.destinaion_time;
            long long now_time = arrival_times[min_vex];
            
            if (!visited[arrival_point] &&
                (now_time  <= destintion_time) &&
                arrival_times[min_vex] != INF &&
                arrival_times[arrival_point] > arrival_time)
                 {
                arrival_times[arrival_point] = arrival_time;
            }
        }


    }

    if (arrival_times[F] == INF) {
        return -1;
    }
    else {
        return arrival_times[F];
    }
}


int main() {

    std::ifstream input("input.txt");

    int N;
    input >> N;

    int d, v;
    input >> d >> v;

    int R;
    input >> R;

    std::vector <std::vector<std::pair<long long, Path>>> buses(N + 1);

    for (int i = 0; i < R; ++i) {
        long long departure, departure_time, destination, arrival_time;
        input >> departure >> departure_time >> destination >> arrival_time;
        buses[departure].push_back({ destination, Path{departure_time, arrival_time} });

    }

    std::cout << dijkstra(buses, N, d, v);

    return 0;
}
